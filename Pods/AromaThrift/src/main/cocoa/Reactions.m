/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"

#import "Aroma.h"
#import "Exceptions.h"

#import "Reactions.h"

@implementation AromaReactions_MatcherAll

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherAll class]]) {
    return NO;
  }
  AromaReactions_MatcherAll *other = (AromaReactions_MatcherAll *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherAll"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherAll("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleIs

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExpectedTitle: (NSString *) expectedTitle
{
  self = [super init];
  __expectedTitle = [expectedTitle retain_stub];
  __expectedTitle_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"expectedTitle"])
  {
    __expectedTitle = [[decoder decodeObjectForKey: @"expectedTitle"] retain_stub];
    __expectedTitle_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__expectedTitle_isset)
  {
    [encoder encodeObject: __expectedTitle forKey: @"expectedTitle"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __expectedTitle_isset ? 2654435761 : 0;
  if (__expectedTitle_isset)
  {
    hash = (hash * 31) ^ [__expectedTitle hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleIs class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleIs *other = (AromaReactions_MatcherTitleIs *)anObject;
  if ((__expectedTitle_isset != other->__expectedTitle_isset) ||
      (__expectedTitle_isset && ((__expectedTitle || other->__expectedTitle) && ![__expectedTitle isEqual:other->__expectedTitle]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__expectedTitle release_stub];
  [super dealloc_stub];
}

- (NSString *) expectedTitle {
  return [[__expectedTitle retain_stub] autorelease_stub];
}

- (void) setExpectedTitle: (NSString *) expectedTitle {
  [expectedTitle retain_stub];
  [__expectedTitle release_stub];
  __expectedTitle = expectedTitle;
  __expectedTitle_isset = YES;
}

- (BOOL) expectedTitleIsSet {
  return __expectedTitle_isset;
}

- (void) unsetExpectedTitle {
  [__expectedTitle release_stub];
  __expectedTitle = nil;
  __expectedTitle_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpectedTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherTitleIs"];
  if (__expectedTitle_isset) {
    if (__expectedTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"expectedTitle" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __expectedTitle];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleIs("];
  [ms appendString: @"expectedTitle:"];
  [ms appendFormat: @"\"%@\"", __expectedTitle];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherTitleContains

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubstring: (NSString *) substring
{
  self = [super init];
  __substring = [substring retain_stub];
  __substring_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"substring"])
  {
    __substring = [[decoder decodeObjectForKey: @"substring"] retain_stub];
    __substring_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__substring_isset)
  {
    [encoder encodeObject: __substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __substring_isset ? 2654435761 : 0;
  if (__substring_isset)
  {
    hash = (hash * 31) ^ [__substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherTitleContains class]]) {
    return NO;
  }
  AromaReactions_MatcherTitleContains *other = (AromaReactions_MatcherTitleContains *)anObject;
  if ((__substring_isset != other->__substring_isset) ||
      (__substring_isset && ((__substring || other->__substring) && ![__substring isEqual:other->__substring]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__substring release_stub];
  [super dealloc_stub];
}

- (NSString *) substring {
  return [[__substring retain_stub] autorelease_stub];
}

- (void) setSubstring: (NSString *) substring {
  [substring retain_stub];
  [__substring release_stub];
  __substring = substring;
  __substring_isset = YES;
}

- (BOOL) substringIsSet {
  return __substring_isset;
}

- (void) unsetSubstring {
  [__substring release_stub];
  __substring = nil;
  __substring_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubstring: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherTitleContains"];
  if (__substring_isset) {
    if (__substring != nil) {
      [outProtocol writeFieldBeginWithName: @"substring" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __substring];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherTitleContains("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", __substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherBodyIs

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExpectedBody: (NSString *) expectedBody
{
  self = [super init];
  __expectedBody = [expectedBody retain_stub];
  __expectedBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"expectedBody"])
  {
    __expectedBody = [[decoder decodeObjectForKey: @"expectedBody"] retain_stub];
    __expectedBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__expectedBody_isset)
  {
    [encoder encodeObject: __expectedBody forKey: @"expectedBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __expectedBody_isset ? 2654435761 : 0;
  if (__expectedBody_isset)
  {
    hash = (hash * 31) ^ [__expectedBody hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherBodyIs class]]) {
    return NO;
  }
  AromaReactions_MatcherBodyIs *other = (AromaReactions_MatcherBodyIs *)anObject;
  if ((__expectedBody_isset != other->__expectedBody_isset) ||
      (__expectedBody_isset && ((__expectedBody || other->__expectedBody) && ![__expectedBody isEqual:other->__expectedBody]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__expectedBody release_stub];
  [super dealloc_stub];
}

- (NSString *) expectedBody {
  return [[__expectedBody retain_stub] autorelease_stub];
}

- (void) setExpectedBody: (NSString *) expectedBody {
  [expectedBody retain_stub];
  [__expectedBody release_stub];
  __expectedBody = expectedBody;
  __expectedBody_isset = YES;
}

- (BOOL) expectedBodyIsSet {
  return __expectedBody_isset;
}

- (void) unsetExpectedBody {
  [__expectedBody release_stub];
  __expectedBody = nil;
  __expectedBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpectedBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherBodyIs"];
  if (__expectedBody_isset) {
    if (__expectedBody != nil) {
      [outProtocol writeFieldBeginWithName: @"expectedBody" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __expectedBody];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherBodyIs("];
  [ms appendString: @"expectedBody:"];
  [ms appendFormat: @"\"%@\"", __expectedBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherBodyContains

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubstring: (NSString *) substring
{
  self = [super init];
  __substring = [substring retain_stub];
  __substring_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"substring"])
  {
    __substring = [[decoder decodeObjectForKey: @"substring"] retain_stub];
    __substring_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__substring_isset)
  {
    [encoder encodeObject: __substring forKey: @"substring"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __substring_isset ? 2654435761 : 0;
  if (__substring_isset)
  {
    hash = (hash * 31) ^ [__substring hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherBodyContains class]]) {
    return NO;
  }
  AromaReactions_MatcherBodyContains *other = (AromaReactions_MatcherBodyContains *)anObject;
  if ((__substring_isset != other->__substring_isset) ||
      (__substring_isset && ((__substring || other->__substring) && ![__substring isEqual:other->__substring]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__substring release_stub];
  [super dealloc_stub];
}

- (NSString *) substring {
  return [[__substring retain_stub] autorelease_stub];
}

- (void) setSubstring: (NSString *) substring {
  [substring retain_stub];
  [__substring release_stub];
  __substring = substring;
  __substring_isset = YES;
}

- (BOOL) substringIsSet {
  return __substring_isset;
}

- (void) unsetSubstring {
  [__substring release_stub];
  __substring = nil;
  __substring_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubstring: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherBodyContains"];
  if (__substring_isset) {
    if (__substring != nil) {
      [outProtocol writeFieldBeginWithName: @"substring" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __substring];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherBodyContains("];
  [ms appendString: @"substring:"];
  [ms appendFormat: @"\"%@\"", __substring];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherUrgencyEquals

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUrgency: (int) urgency
{
  self = [super init];
  __urgency = urgency;
  __urgency_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"urgency"])
  {
    __urgency = [decoder decodeIntForKey: @"urgency"];
    __urgency_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__urgency_isset)
  {
    [encoder encodeInt: __urgency forKey: @"urgency"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __urgency_isset ? 2654435761 : 0;
  if (__urgency_isset)
  {
    hash = (hash * 31) ^ [@(__urgency) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherUrgencyEquals class]]) {
    return NO;
  }
  AromaReactions_MatcherUrgencyEquals *other = (AromaReactions_MatcherUrgencyEquals *)anObject;
  if ((__urgency_isset != other->__urgency_isset) ||
      (__urgency_isset && (__urgency != other->__urgency))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) urgency {
  return __urgency;
}

- (void) setUrgency: (int) urgency {
  __urgency = urgency;
  __urgency_isset = YES;
}

- (BOOL) urgencyIsSet {
  return __urgency_isset;
}

- (void) unsetUrgency {
  __urgency_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUrgency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherUrgencyEquals"];
  if (__urgency_isset) {
    [outProtocol writeFieldBeginWithName: @"urgency" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __urgency];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherUrgencyEquals("];
  [ms appendString: @"urgency:"];
  [ms appendFormat: @"%i", __urgency];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_MatcherHostnameEquals

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithExpectedHostname: (NSString *) expectedHostname
{
  self = [super init];
  __expectedHostname = [expectedHostname retain_stub];
  __expectedHostname_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"expectedHostname"])
  {
    __expectedHostname = [[decoder decodeObjectForKey: @"expectedHostname"] retain_stub];
    __expectedHostname_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__expectedHostname_isset)
  {
    [encoder encodeObject: __expectedHostname forKey: @"expectedHostname"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __expectedHostname_isset ? 2654435761 : 0;
  if (__expectedHostname_isset)
  {
    hash = (hash * 31) ^ [__expectedHostname hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_MatcherHostnameEquals class]]) {
    return NO;
  }
  AromaReactions_MatcherHostnameEquals *other = (AromaReactions_MatcherHostnameEquals *)anObject;
  if ((__expectedHostname_isset != other->__expectedHostname_isset) ||
      (__expectedHostname_isset && ((__expectedHostname || other->__expectedHostname) && ![__expectedHostname isEqual:other->__expectedHostname]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__expectedHostname release_stub];
  [super dealloc_stub];
}

- (NSString *) expectedHostname {
  return [[__expectedHostname retain_stub] autorelease_stub];
}

- (void) setExpectedHostname: (NSString *) expectedHostname {
  [expectedHostname retain_stub];
  [__expectedHostname release_stub];
  __expectedHostname = expectedHostname;
  __expectedHostname_isset = YES;
}

- (BOOL) expectedHostnameIsSet {
  return __expectedHostname_isset;
}

- (void) unsetExpectedHostname {
  [__expectedHostname release_stub];
  __expectedHostname = nil;
  __expectedHostname_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpectedHostname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MatcherHostnameEquals"];
  if (__expectedHostname_isset) {
    if (__expectedHostname != nil) {
      [outProtocol writeFieldBeginWithName: @"expectedHostname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __expectedHostname];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_MatcherHostnameEquals("];
  [ms appendString: @"expectedHostname:"];
  [ms appendFormat: @"\"%@\"", __expectedHostname];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_AromaMatcher

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAll: (AromaReactions_MatcherAll *) all titleIs: (AromaReactions_MatcherTitleIs *) titleIs titleContains: (AromaReactions_MatcherTitleContains *) titleContains bodyIs: (AromaReactions_MatcherBodyIs *) bodyIs bodyContains: (AromaReactions_MatcherBodyContains *) bodyContains urgencyEquals: (AromaReactions_MatcherUrgencyEquals *) urgencyEquals hostnameEquals: (AromaReactions_MatcherHostnameEquals *) hostnameEquals
{
  self = [super init];
  __all = [all retain_stub];
  __all_isset = YES;
  __titleIs = [titleIs retain_stub];
  __titleIs_isset = YES;
  __titleContains = [titleContains retain_stub];
  __titleContains_isset = YES;
  __bodyIs = [bodyIs retain_stub];
  __bodyIs_isset = YES;
  __bodyContains = [bodyContains retain_stub];
  __bodyContains_isset = YES;
  __urgencyEquals = [urgencyEquals retain_stub];
  __urgencyEquals_isset = YES;
  __hostnameEquals = [hostnameEquals retain_stub];
  __hostnameEquals_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"all"])
  {
    __all = [[decoder decodeObjectForKey: @"all"] retain_stub];
    __all_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleIs"])
  {
    __titleIs = [[decoder decodeObjectForKey: @"titleIs"] retain_stub];
    __titleIs_isset = YES;
  }
  if ([decoder containsValueForKey: @"titleContains"])
  {
    __titleContains = [[decoder decodeObjectForKey: @"titleContains"] retain_stub];
    __titleContains_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyIs"])
  {
    __bodyIs = [[decoder decodeObjectForKey: @"bodyIs"] retain_stub];
    __bodyIs_isset = YES;
  }
  if ([decoder containsValueForKey: @"bodyContains"])
  {
    __bodyContains = [[decoder decodeObjectForKey: @"bodyContains"] retain_stub];
    __bodyContains_isset = YES;
  }
  if ([decoder containsValueForKey: @"urgencyEquals"])
  {
    __urgencyEquals = [[decoder decodeObjectForKey: @"urgencyEquals"] retain_stub];
    __urgencyEquals_isset = YES;
  }
  if ([decoder containsValueForKey: @"hostnameEquals"])
  {
    __hostnameEquals = [[decoder decodeObjectForKey: @"hostnameEquals"] retain_stub];
    __hostnameEquals_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__all_isset)
  {
    [encoder encodeObject: __all forKey: @"all"];
  }
  if (__titleIs_isset)
  {
    [encoder encodeObject: __titleIs forKey: @"titleIs"];
  }
  if (__titleContains_isset)
  {
    [encoder encodeObject: __titleContains forKey: @"titleContains"];
  }
  if (__bodyIs_isset)
  {
    [encoder encodeObject: __bodyIs forKey: @"bodyIs"];
  }
  if (__bodyContains_isset)
  {
    [encoder encodeObject: __bodyContains forKey: @"bodyContains"];
  }
  if (__urgencyEquals_isset)
  {
    [encoder encodeObject: __urgencyEquals forKey: @"urgencyEquals"];
  }
  if (__hostnameEquals_isset)
  {
    [encoder encodeObject: __hostnameEquals forKey: @"hostnameEquals"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __all_isset ? 2654435761 : 0;
  if (__all_isset)
  {
    hash = (hash * 31) ^ [__all hash];
  }
  hash = (hash * 31) ^ __titleIs_isset ? 2654435761 : 0;
  if (__titleIs_isset)
  {
    hash = (hash * 31) ^ [__titleIs hash];
  }
  hash = (hash * 31) ^ __titleContains_isset ? 2654435761 : 0;
  if (__titleContains_isset)
  {
    hash = (hash * 31) ^ [__titleContains hash];
  }
  hash = (hash * 31) ^ __bodyIs_isset ? 2654435761 : 0;
  if (__bodyIs_isset)
  {
    hash = (hash * 31) ^ [__bodyIs hash];
  }
  hash = (hash * 31) ^ __bodyContains_isset ? 2654435761 : 0;
  if (__bodyContains_isset)
  {
    hash = (hash * 31) ^ [__bodyContains hash];
  }
  hash = (hash * 31) ^ __urgencyEquals_isset ? 2654435761 : 0;
  if (__urgencyEquals_isset)
  {
    hash = (hash * 31) ^ [__urgencyEquals hash];
  }
  hash = (hash * 31) ^ __hostnameEquals_isset ? 2654435761 : 0;
  if (__hostnameEquals_isset)
  {
    hash = (hash * 31) ^ [__hostnameEquals hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_AromaMatcher class]]) {
    return NO;
  }
  AromaReactions_AromaMatcher *other = (AromaReactions_AromaMatcher *)anObject;
  if ((__all_isset != other->__all_isset) ||
      (__all_isset && ((__all || other->__all) && ![__all isEqual:other->__all]))) {
    return NO;
  }
  if ((__titleIs_isset != other->__titleIs_isset) ||
      (__titleIs_isset && ((__titleIs || other->__titleIs) && ![__titleIs isEqual:other->__titleIs]))) {
    return NO;
  }
  if ((__titleContains_isset != other->__titleContains_isset) ||
      (__titleContains_isset && ((__titleContains || other->__titleContains) && ![__titleContains isEqual:other->__titleContains]))) {
    return NO;
  }
  if ((__bodyIs_isset != other->__bodyIs_isset) ||
      (__bodyIs_isset && ((__bodyIs || other->__bodyIs) && ![__bodyIs isEqual:other->__bodyIs]))) {
    return NO;
  }
  if ((__bodyContains_isset != other->__bodyContains_isset) ||
      (__bodyContains_isset && ((__bodyContains || other->__bodyContains) && ![__bodyContains isEqual:other->__bodyContains]))) {
    return NO;
  }
  if ((__urgencyEquals_isset != other->__urgencyEquals_isset) ||
      (__urgencyEquals_isset && ((__urgencyEquals || other->__urgencyEquals) && ![__urgencyEquals isEqual:other->__urgencyEquals]))) {
    return NO;
  }
  if ((__hostnameEquals_isset != other->__hostnameEquals_isset) ||
      (__hostnameEquals_isset && ((__hostnameEquals || other->__hostnameEquals) && ![__hostnameEquals isEqual:other->__hostnameEquals]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__all release_stub];
  [__titleIs release_stub];
  [__titleContains release_stub];
  [__bodyIs release_stub];
  [__bodyContains release_stub];
  [__urgencyEquals release_stub];
  [__hostnameEquals release_stub];
  [super dealloc_stub];
}

- (AromaReactions_MatcherAll *) all {
  return [[__all retain_stub] autorelease_stub];
}

- (void) setAll: (AromaReactions_MatcherAll *) all {
  [all retain_stub];
  [__all release_stub];
  __all = all;
  __all_isset = YES;
}

- (BOOL) allIsSet {
  return __all_isset;
}

- (void) unsetAll {
  [__all release_stub];
  __all = nil;
  __all_isset = NO;
}

- (AromaReactions_MatcherTitleIs *) titleIs {
  return [[__titleIs retain_stub] autorelease_stub];
}

- (void) setTitleIs: (AromaReactions_MatcherTitleIs *) titleIs {
  [titleIs retain_stub];
  [__titleIs release_stub];
  __titleIs = titleIs;
  __titleIs_isset = YES;
}

- (BOOL) titleIsIsSet {
  return __titleIs_isset;
}

- (void) unsetTitleIs {
  [__titleIs release_stub];
  __titleIs = nil;
  __titleIs_isset = NO;
}

- (AromaReactions_MatcherTitleContains *) titleContains {
  return [[__titleContains retain_stub] autorelease_stub];
}

- (void) setTitleContains: (AromaReactions_MatcherTitleContains *) titleContains {
  [titleContains retain_stub];
  [__titleContains release_stub];
  __titleContains = titleContains;
  __titleContains_isset = YES;
}

- (BOOL) titleContainsIsSet {
  return __titleContains_isset;
}

- (void) unsetTitleContains {
  [__titleContains release_stub];
  __titleContains = nil;
  __titleContains_isset = NO;
}

- (AromaReactions_MatcherBodyIs *) bodyIs {
  return [[__bodyIs retain_stub] autorelease_stub];
}

- (void) setBodyIs: (AromaReactions_MatcherBodyIs *) bodyIs {
  [bodyIs retain_stub];
  [__bodyIs release_stub];
  __bodyIs = bodyIs;
  __bodyIs_isset = YES;
}

- (BOOL) bodyIsIsSet {
  return __bodyIs_isset;
}

- (void) unsetBodyIs {
  [__bodyIs release_stub];
  __bodyIs = nil;
  __bodyIs_isset = NO;
}

- (AromaReactions_MatcherBodyContains *) bodyContains {
  return [[__bodyContains retain_stub] autorelease_stub];
}

- (void) setBodyContains: (AromaReactions_MatcherBodyContains *) bodyContains {
  [bodyContains retain_stub];
  [__bodyContains release_stub];
  __bodyContains = bodyContains;
  __bodyContains_isset = YES;
}

- (BOOL) bodyContainsIsSet {
  return __bodyContains_isset;
}

- (void) unsetBodyContains {
  [__bodyContains release_stub];
  __bodyContains = nil;
  __bodyContains_isset = NO;
}

- (AromaReactions_MatcherUrgencyEquals *) urgencyEquals {
  return [[__urgencyEquals retain_stub] autorelease_stub];
}

- (void) setUrgencyEquals: (AromaReactions_MatcherUrgencyEquals *) urgencyEquals {
  [urgencyEquals retain_stub];
  [__urgencyEquals release_stub];
  __urgencyEquals = urgencyEquals;
  __urgencyEquals_isset = YES;
}

- (BOOL) urgencyEqualsIsSet {
  return __urgencyEquals_isset;
}

- (void) unsetUrgencyEquals {
  [__urgencyEquals release_stub];
  __urgencyEquals = nil;
  __urgencyEquals_isset = NO;
}

- (AromaReactions_MatcherHostnameEquals *) hostnameEquals {
  return [[__hostnameEquals retain_stub] autorelease_stub];
}

- (void) setHostnameEquals: (AromaReactions_MatcherHostnameEquals *) hostnameEquals {
  [hostnameEquals retain_stub];
  [__hostnameEquals release_stub];
  __hostnameEquals = hostnameEquals;
  __hostnameEquals_isset = YES;
}

- (BOOL) hostnameEqualsIsSet {
  return __hostnameEquals_isset;
}

- (void) unsetHostnameEquals {
  [__hostnameEquals release_stub];
  __hostnameEquals = nil;
  __hostnameEquals_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherAll *fieldValue = [[AromaReactions_MatcherAll alloc] init];
          [fieldValue read: inProtocol];
          [self setAll: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherTitleIs *fieldValue = [[AromaReactions_MatcherTitleIs alloc] init];
          [fieldValue read: inProtocol];
          [self setTitleIs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherTitleContains *fieldValue = [[AromaReactions_MatcherTitleContains alloc] init];
          [fieldValue read: inProtocol];
          [self setTitleContains: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherBodyIs *fieldValue = [[AromaReactions_MatcherBodyIs alloc] init];
          [fieldValue read: inProtocol];
          [self setBodyIs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherBodyContains *fieldValue = [[AromaReactions_MatcherBodyContains alloc] init];
          [fieldValue read: inProtocol];
          [self setBodyContains: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherUrgencyEquals *fieldValue = [[AromaReactions_MatcherUrgencyEquals alloc] init];
          [fieldValue read: inProtocol];
          [self setUrgencyEquals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          AromaReactions_MatcherHostnameEquals *fieldValue = [[AromaReactions_MatcherHostnameEquals alloc] init];
          [fieldValue read: inProtocol];
          [self setHostnameEquals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AromaMatcher"];
  if (__all_isset) {
    if (__all != nil) {
      [outProtocol writeFieldBeginWithName: @"all" type: TType_STRUCT fieldID: 1];
      [__all write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__titleIs_isset) {
    if (__titleIs != nil) {
      [outProtocol writeFieldBeginWithName: @"titleIs" type: TType_STRUCT fieldID: 2];
      [__titleIs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__titleContains_isset) {
    if (__titleContains != nil) {
      [outProtocol writeFieldBeginWithName: @"titleContains" type: TType_STRUCT fieldID: 3];
      [__titleContains write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bodyIs_isset) {
    if (__bodyIs != nil) {
      [outProtocol writeFieldBeginWithName: @"bodyIs" type: TType_STRUCT fieldID: 4];
      [__bodyIs write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bodyContains_isset) {
    if (__bodyContains != nil) {
      [outProtocol writeFieldBeginWithName: @"bodyContains" type: TType_STRUCT fieldID: 5];
      [__bodyContains write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__urgencyEquals_isset) {
    if (__urgencyEquals != nil) {
      [outProtocol writeFieldBeginWithName: @"urgencyEquals" type: TType_STRUCT fieldID: 6];
      [__urgencyEquals write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hostnameEquals_isset) {
    if (__hostnameEquals != nil) {
      [outProtocol writeFieldBeginWithName: @"hostnameEquals" type: TType_STRUCT fieldID: 7];
      [__hostnameEquals write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_AromaMatcher("];
  [ms appendString: @"all:"];
  [ms appendFormat: @"%@", __all];
  [ms appendString: @",titleIs:"];
  [ms appendFormat: @"%@", __titleIs];
  [ms appendString: @",titleContains:"];
  [ms appendFormat: @"%@", __titleContains];
  [ms appendString: @",bodyIs:"];
  [ms appendFormat: @"%@", __bodyIs];
  [ms appendString: @",bodyContains:"];
  [ms appendFormat: @"%@", __bodyContains];
  [ms appendString: @",urgencyEquals:"];
  [ms appendFormat: @"%@", __urgencyEquals];
  [ms appendString: @",hostnameEquals:"];
  [ms appendFormat: @"%@", __hostnameEquals];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionPostToSlackChannel

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.includeBody = YES;

#endif
  return self;
}

- (id) initWithSlackChannel: (NSString *) slackChannel includeBody: (BOOL) includeBody
{
  self = [super init];
  __slackChannel = [slackChannel retain_stub];
  __slackChannel_isset = YES;
  __includeBody = includeBody;
  __includeBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"slackChannel"])
  {
    __slackChannel = [[decoder decodeObjectForKey: @"slackChannel"] retain_stub];
    __slackChannel_isset = YES;
  }
  if ([decoder containsValueForKey: @"includeBody"])
  {
    __includeBody = [decoder decodeBoolForKey: @"includeBody"];
    __includeBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__slackChannel_isset)
  {
    [encoder encodeObject: __slackChannel forKey: @"slackChannel"];
  }
  if (__includeBody_isset)
  {
    [encoder encodeBool: __includeBody forKey: @"includeBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __slackChannel_isset ? 2654435761 : 0;
  if (__slackChannel_isset)
  {
    hash = (hash * 31) ^ [__slackChannel hash];
  }
  hash = (hash * 31) ^ __includeBody_isset ? 2654435761 : 0;
  if (__includeBody_isset)
  {
    hash = (hash * 31) ^ [@(__includeBody) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionPostToSlackChannel class]]) {
    return NO;
  }
  AromaReactions_ActionPostToSlackChannel *other = (AromaReactions_ActionPostToSlackChannel *)anObject;
  if ((__slackChannel_isset != other->__slackChannel_isset) ||
      (__slackChannel_isset && ((__slackChannel || other->__slackChannel) && ![__slackChannel isEqual:other->__slackChannel]))) {
    return NO;
  }
  if ((__includeBody_isset != other->__includeBody_isset) ||
      (__includeBody_isset && (__includeBody != other->__includeBody))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__slackChannel release_stub];
  [super dealloc_stub];
}

- (NSString *) slackChannel {
  return [[__slackChannel retain_stub] autorelease_stub];
}

- (void) setSlackChannel: (NSString *) slackChannel {
  [slackChannel retain_stub];
  [__slackChannel release_stub];
  __slackChannel = slackChannel;
  __slackChannel_isset = YES;
}

- (BOOL) slackChannelIsSet {
  return __slackChannel_isset;
}

- (void) unsetSlackChannel {
  [__slackChannel release_stub];
  __slackChannel = nil;
  __slackChannel_isset = NO;
}

- (BOOL) includeBody {
  return __includeBody;
}

- (void) setIncludeBody: (BOOL) includeBody {
  __includeBody = includeBody;
  __includeBody_isset = YES;
}

- (BOOL) includeBodyIsSet {
  return __includeBody_isset;
}

- (void) unsetIncludeBody {
  __includeBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSlackChannel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIncludeBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActionPostToSlackChannel"];
  if (__slackChannel_isset) {
    if (__slackChannel != nil) {
      [outProtocol writeFieldBeginWithName: @"slackChannel" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __slackChannel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__includeBody_isset) {
    [outProtocol writeFieldBeginWithName: @"includeBody" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __includeBody];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionPostToSlackChannel("];
  [ms appendString: @"slackChannel:"];
  [ms appendFormat: @"\"%@\"", __slackChannel];
  [ms appendString: @",includeBody:"];
  [ms appendFormat: @"%i", __includeBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionPostToSlackUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.includeBody = YES;

#endif
  return self;
}

- (id) initWithSlackUsername: (NSString *) slackUsername includeBody: (BOOL) includeBody
{
  self = [super init];
  __slackUsername = [slackUsername retain_stub];
  __slackUsername_isset = YES;
  __includeBody = includeBody;
  __includeBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"slackUsername"])
  {
    __slackUsername = [[decoder decodeObjectForKey: @"slackUsername"] retain_stub];
    __slackUsername_isset = YES;
  }
  if ([decoder containsValueForKey: @"includeBody"])
  {
    __includeBody = [decoder decodeBoolForKey: @"includeBody"];
    __includeBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__slackUsername_isset)
  {
    [encoder encodeObject: __slackUsername forKey: @"slackUsername"];
  }
  if (__includeBody_isset)
  {
    [encoder encodeBool: __includeBody forKey: @"includeBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __slackUsername_isset ? 2654435761 : 0;
  if (__slackUsername_isset)
  {
    hash = (hash * 31) ^ [__slackUsername hash];
  }
  hash = (hash * 31) ^ __includeBody_isset ? 2654435761 : 0;
  if (__includeBody_isset)
  {
    hash = (hash * 31) ^ [@(__includeBody) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionPostToSlackUser class]]) {
    return NO;
  }
  AromaReactions_ActionPostToSlackUser *other = (AromaReactions_ActionPostToSlackUser *)anObject;
  if ((__slackUsername_isset != other->__slackUsername_isset) ||
      (__slackUsername_isset && ((__slackUsername || other->__slackUsername) && ![__slackUsername isEqual:other->__slackUsername]))) {
    return NO;
  }
  if ((__includeBody_isset != other->__includeBody_isset) ||
      (__includeBody_isset && (__includeBody != other->__includeBody))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__slackUsername release_stub];
  [super dealloc_stub];
}

- (NSString *) slackUsername {
  return [[__slackUsername retain_stub] autorelease_stub];
}

- (void) setSlackUsername: (NSString *) slackUsername {
  [slackUsername retain_stub];
  [__slackUsername release_stub];
  __slackUsername = slackUsername;
  __slackUsername_isset = YES;
}

- (BOOL) slackUsernameIsSet {
  return __slackUsername_isset;
}

- (void) unsetSlackUsername {
  [__slackUsername release_stub];
  __slackUsername = nil;
  __slackUsername_isset = NO;
}

- (BOOL) includeBody {
  return __includeBody;
}

- (void) setIncludeBody: (BOOL) includeBody {
  __includeBody = includeBody;
  __includeBody_isset = YES;
}

- (BOOL) includeBodyIsSet {
  return __includeBody_isset;
}

- (void) unsetIncludeBody {
  __includeBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSlackUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIncludeBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActionPostToSlackUser"];
  if (__slackUsername_isset) {
    if (__slackUsername != nil) {
      [outProtocol writeFieldBeginWithName: @"slackUsername" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __slackUsername];
      [outProtocol writeFieldEnd];
    }
  }
  if (__includeBody_isset) {
    [outProtocol writeFieldBeginWithName: @"includeBody" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __includeBody];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionPostToSlackUser("];
  [ms appendString: @"slackUsername:"];
  [ms appendFormat: @"\"%@\"", __slackUsername];
  [ms appendString: @",includeBody:"];
  [ms appendFormat: @"%i", __includeBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionSendEmail

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.includeBody = YES;

#endif
  return self;
}

- (id) initWithEmailAddress: (NSString *) emailAddress includeBody: (BOOL) includeBody
{
  self = [super init];
  __emailAddress = [emailAddress retain_stub];
  __emailAddress_isset = YES;
  __includeBody = includeBody;
  __includeBody_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"emailAddress"])
  {
    __emailAddress = [[decoder decodeObjectForKey: @"emailAddress"] retain_stub];
    __emailAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"includeBody"])
  {
    __includeBody = [decoder decodeBoolForKey: @"includeBody"];
    __includeBody_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__emailAddress_isset)
  {
    [encoder encodeObject: __emailAddress forKey: @"emailAddress"];
  }
  if (__includeBody_isset)
  {
    [encoder encodeBool: __includeBody forKey: @"includeBody"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __emailAddress_isset ? 2654435761 : 0;
  if (__emailAddress_isset)
  {
    hash = (hash * 31) ^ [__emailAddress hash];
  }
  hash = (hash * 31) ^ __includeBody_isset ? 2654435761 : 0;
  if (__includeBody_isset)
  {
    hash = (hash * 31) ^ [@(__includeBody) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionSendEmail class]]) {
    return NO;
  }
  AromaReactions_ActionSendEmail *other = (AromaReactions_ActionSendEmail *)anObject;
  if ((__emailAddress_isset != other->__emailAddress_isset) ||
      (__emailAddress_isset && ((__emailAddress || other->__emailAddress) && ![__emailAddress isEqual:other->__emailAddress]))) {
    return NO;
  }
  if ((__includeBody_isset != other->__includeBody_isset) ||
      (__includeBody_isset && (__includeBody != other->__includeBody))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__emailAddress release_stub];
  [super dealloc_stub];
}

- (NSString *) emailAddress {
  return [[__emailAddress retain_stub] autorelease_stub];
}

- (void) setEmailAddress: (NSString *) emailAddress {
  [emailAddress retain_stub];
  [__emailAddress release_stub];
  __emailAddress = emailAddress;
  __emailAddress_isset = YES;
}

- (BOOL) emailAddressIsSet {
  return __emailAddress_isset;
}

- (void) unsetEmailAddress {
  [__emailAddress release_stub];
  __emailAddress = nil;
  __emailAddress_isset = NO;
}

- (BOOL) includeBody {
  return __includeBody;
}

- (void) setIncludeBody: (BOOL) includeBody {
  __includeBody = includeBody;
  __includeBody_isset = YES;
}

- (BOOL) includeBodyIsSet {
  return __includeBody_isset;
}

- (void) unsetIncludeBody {
  __includeBody_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmailAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIncludeBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActionSendEmail"];
  if (__emailAddress_isset) {
    if (__emailAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"emailAddress" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __emailAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__includeBody_isset) {
    [outProtocol writeFieldBeginWithName: @"includeBody" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __includeBody];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionSendEmail("];
  [ms appendString: @"emailAddress:"];
  [ms appendFormat: @"\"%@\"", __emailAddress];
  [ms appendString: @",includeBody:"];
  [ms appendFormat: @"%i", __includeBody];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionIgnore

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionIgnore class]]) {
    return NO;
  }
  AromaReactions_ActionIgnore *other = (AromaReactions_ActionIgnore *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActionIgnore"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionIgnore("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionDeleteMessage

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionDeleteMessage class]]) {
    return NO;
  }
  AromaReactions_ActionDeleteMessage *other = (AromaReactions_ActionDeleteMessage *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActionDeleteMessage"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionDeleteMessage("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionRespondToCode

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessageToSend: (NSString *) messageToSend
{
  self = [super init];
  __messageToSend = [messageToSend retain_stub];
  __messageToSend_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"messageToSend"])
  {
    __messageToSend = [[decoder decodeObjectForKey: @"messageToSend"] retain_stub];
    __messageToSend_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__messageToSend_isset)
  {
    [encoder encodeObject: __messageToSend forKey: @"messageToSend"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __messageToSend_isset ? 2654435761 : 0;
  if (__messageToSend_isset)
  {
    hash = (hash * 31) ^ [__messageToSend hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionRespondToCode class]]) {
    return NO;
  }
  AromaReactions_ActionRespondToCode *other = (AromaReactions_ActionRespondToCode *)anObject;
  if ((__messageToSend_isset != other->__messageToSend_isset) ||
      (__messageToSend_isset && ((__messageToSend || other->__messageToSend) && ![__messageToSend isEqual:other->__messageToSend]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__messageToSend release_stub];
  [super dealloc_stub];
}

- (NSString *) messageToSend {
  return [[__messageToSend retain_stub] autorelease_stub];
}

- (void) setMessageToSend: (NSString *) messageToSend {
  [messageToSend retain_stub];
  [__messageToSend release_stub];
  __messageToSend = messageToSend;
  __messageToSend_isset = YES;
}

- (BOOL) messageToSendIsSet {
  return __messageToSend_isset;
}

- (void) unsetMessageToSend {
  [__messageToSend release_stub];
  __messageToSend = nil;
  __messageToSend_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessageToSend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActionRespondToCode"];
  if (__messageToSend_isset) {
    if (__messageToSend != nil) {
      [outProtocol writeFieldBeginWithName: @"messageToSend" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __messageToSend];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionRespondToCode("];
  [ms appendString: @"messageToSend:"];
  [ms appendFormat: @"\"%@\"", __messageToSend];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_ActionForwardToUsers

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.userIds = [[[NSMutableArray alloc] initWithCapacity:0] autorelease_stub];

#endif
  return self;
}

- (id) initWithUserIds: (NSMutableArray *) userIds
{
  self = [super init];
  __userIds = [userIds retain_stub];
  __userIds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userIds"])
  {
    __userIds = [[decoder decodeObjectForKey: @"userIds"] retain_stub];
    __userIds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userIds_isset)
  {
    [encoder encodeObject: __userIds forKey: @"userIds"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userIds_isset ? 2654435761 : 0;
  if (__userIds_isset)
  {
    hash = (hash * 31) ^ [__userIds hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_ActionForwardToUsers class]]) {
    return NO;
  }
  AromaReactions_ActionForwardToUsers *other = (AromaReactions_ActionForwardToUsers *)anObject;
  if ((__userIds_isset != other->__userIds_isset) ||
      (__userIds_isset && ((__userIds || other->__userIds) && ![__userIds isEqual:other->__userIds]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userIds release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) userIds {
  return [[__userIds retain_stub] autorelease_stub];
}

- (void) setUserIds: (NSMutableArray *) userIds {
  [userIds retain_stub];
  [__userIds release_stub];
  __userIds = userIds;
  __userIds_isset = YES;
}

- (BOOL) userIdsIsSet {
  return __userIds_isset;
}

- (void) unsetUserIds {
  [__userIds release_stub];
  __userIds = nil;
  __userIds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setUserIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActionForwardToUsers"];
  if (__userIds_isset) {
    if (__userIds != nil) {
      [outProtocol writeFieldBeginWithName: @"userIds" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__userIds count]];
        int idx4;
        for (idx4 = 0; idx4 < [__userIds count]; idx4++)
        {
          [outProtocol writeString: [__userIds objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_ActionForwardToUsers("];
  [ms appendString: @"userIds:"];
  [ms appendFormat: @"%@", __userIds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_AromaAction

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPostToSlackChannel: (AromaReactions_ActionPostToSlackChannel *) postToSlackChannel postToSlackUser: (AromaReactions_ActionPostToSlackUser *) postToSlackUser sendEmail: (AromaReactions_ActionSendEmail *) sendEmail ignore: (AromaReactions_ActionIgnore *) ignore deleteMessage: (AromaReactions_ActionDeleteMessage *) deleteMessage respondToCode: (AromaReactions_ActionRespondToCode *) respondToCode forwardToUsers: (AromaReactions_ActionForwardToUsers *) forwardToUsers
{
  self = [super init];
  __postToSlackChannel = [postToSlackChannel retain_stub];
  __postToSlackChannel_isset = YES;
  __postToSlackUser = [postToSlackUser retain_stub];
  __postToSlackUser_isset = YES;
  __sendEmail = [sendEmail retain_stub];
  __sendEmail_isset = YES;
  __ignore = [ignore retain_stub];
  __ignore_isset = YES;
  __deleteMessage = [deleteMessage retain_stub];
  __deleteMessage_isset = YES;
  __respondToCode = [respondToCode retain_stub];
  __respondToCode_isset = YES;
  __forwardToUsers = [forwardToUsers retain_stub];
  __forwardToUsers_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"postToSlackChannel"])
  {
    __postToSlackChannel = [[decoder decodeObjectForKey: @"postToSlackChannel"] retain_stub];
    __postToSlackChannel_isset = YES;
  }
  if ([decoder containsValueForKey: @"postToSlackUser"])
  {
    __postToSlackUser = [[decoder decodeObjectForKey: @"postToSlackUser"] retain_stub];
    __postToSlackUser_isset = YES;
  }
  if ([decoder containsValueForKey: @"sendEmail"])
  {
    __sendEmail = [[decoder decodeObjectForKey: @"sendEmail"] retain_stub];
    __sendEmail_isset = YES;
  }
  if ([decoder containsValueForKey: @"ignore"])
  {
    __ignore = [[decoder decodeObjectForKey: @"ignore"] retain_stub];
    __ignore_isset = YES;
  }
  if ([decoder containsValueForKey: @"deleteMessage"])
  {
    __deleteMessage = [[decoder decodeObjectForKey: @"deleteMessage"] retain_stub];
    __deleteMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"respondToCode"])
  {
    __respondToCode = [[decoder decodeObjectForKey: @"respondToCode"] retain_stub];
    __respondToCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"forwardToUsers"])
  {
    __forwardToUsers = [[decoder decodeObjectForKey: @"forwardToUsers"] retain_stub];
    __forwardToUsers_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__postToSlackChannel_isset)
  {
    [encoder encodeObject: __postToSlackChannel forKey: @"postToSlackChannel"];
  }
  if (__postToSlackUser_isset)
  {
    [encoder encodeObject: __postToSlackUser forKey: @"postToSlackUser"];
  }
  if (__sendEmail_isset)
  {
    [encoder encodeObject: __sendEmail forKey: @"sendEmail"];
  }
  if (__ignore_isset)
  {
    [encoder encodeObject: __ignore forKey: @"ignore"];
  }
  if (__deleteMessage_isset)
  {
    [encoder encodeObject: __deleteMessage forKey: @"deleteMessage"];
  }
  if (__respondToCode_isset)
  {
    [encoder encodeObject: __respondToCode forKey: @"respondToCode"];
  }
  if (__forwardToUsers_isset)
  {
    [encoder encodeObject: __forwardToUsers forKey: @"forwardToUsers"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __postToSlackChannel_isset ? 2654435761 : 0;
  if (__postToSlackChannel_isset)
  {
    hash = (hash * 31) ^ [__postToSlackChannel hash];
  }
  hash = (hash * 31) ^ __postToSlackUser_isset ? 2654435761 : 0;
  if (__postToSlackUser_isset)
  {
    hash = (hash * 31) ^ [__postToSlackUser hash];
  }
  hash = (hash * 31) ^ __sendEmail_isset ? 2654435761 : 0;
  if (__sendEmail_isset)
  {
    hash = (hash * 31) ^ [__sendEmail hash];
  }
  hash = (hash * 31) ^ __ignore_isset ? 2654435761 : 0;
  if (__ignore_isset)
  {
    hash = (hash * 31) ^ [__ignore hash];
  }
  hash = (hash * 31) ^ __deleteMessage_isset ? 2654435761 : 0;
  if (__deleteMessage_isset)
  {
    hash = (hash * 31) ^ [__deleteMessage hash];
  }
  hash = (hash * 31) ^ __respondToCode_isset ? 2654435761 : 0;
  if (__respondToCode_isset)
  {
    hash = (hash * 31) ^ [__respondToCode hash];
  }
  hash = (hash * 31) ^ __forwardToUsers_isset ? 2654435761 : 0;
  if (__forwardToUsers_isset)
  {
    hash = (hash * 31) ^ [__forwardToUsers hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_AromaAction class]]) {
    return NO;
  }
  AromaReactions_AromaAction *other = (AromaReactions_AromaAction *)anObject;
  if ((__postToSlackChannel_isset != other->__postToSlackChannel_isset) ||
      (__postToSlackChannel_isset && ((__postToSlackChannel || other->__postToSlackChannel) && ![__postToSlackChannel isEqual:other->__postToSlackChannel]))) {
    return NO;
  }
  if ((__postToSlackUser_isset != other->__postToSlackUser_isset) ||
      (__postToSlackUser_isset && ((__postToSlackUser || other->__postToSlackUser) && ![__postToSlackUser isEqual:other->__postToSlackUser]))) {
    return NO;
  }
  if ((__sendEmail_isset != other->__sendEmail_isset) ||
      (__sendEmail_isset && ((__sendEmail || other->__sendEmail) && ![__sendEmail isEqual:other->__sendEmail]))) {
    return NO;
  }
  if ((__ignore_isset != other->__ignore_isset) ||
      (__ignore_isset && ((__ignore || other->__ignore) && ![__ignore isEqual:other->__ignore]))) {
    return NO;
  }
  if ((__deleteMessage_isset != other->__deleteMessage_isset) ||
      (__deleteMessage_isset && ((__deleteMessage || other->__deleteMessage) && ![__deleteMessage isEqual:other->__deleteMessage]))) {
    return NO;
  }
  if ((__respondToCode_isset != other->__respondToCode_isset) ||
      (__respondToCode_isset && ((__respondToCode || other->__respondToCode) && ![__respondToCode isEqual:other->__respondToCode]))) {
    return NO;
  }
  if ((__forwardToUsers_isset != other->__forwardToUsers_isset) ||
      (__forwardToUsers_isset && ((__forwardToUsers || other->__forwardToUsers) && ![__forwardToUsers isEqual:other->__forwardToUsers]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__postToSlackChannel release_stub];
  [__postToSlackUser release_stub];
  [__sendEmail release_stub];
  [__ignore release_stub];
  [__deleteMessage release_stub];
  [__respondToCode release_stub];
  [__forwardToUsers release_stub];
  [super dealloc_stub];
}

- (AromaReactions_ActionPostToSlackChannel *) postToSlackChannel {
  return [[__postToSlackChannel retain_stub] autorelease_stub];
}

- (void) setPostToSlackChannel: (AromaReactions_ActionPostToSlackChannel *) postToSlackChannel {
  [postToSlackChannel retain_stub];
  [__postToSlackChannel release_stub];
  __postToSlackChannel = postToSlackChannel;
  __postToSlackChannel_isset = YES;
}

- (BOOL) postToSlackChannelIsSet {
  return __postToSlackChannel_isset;
}

- (void) unsetPostToSlackChannel {
  [__postToSlackChannel release_stub];
  __postToSlackChannel = nil;
  __postToSlackChannel_isset = NO;
}

- (AromaReactions_ActionPostToSlackUser *) postToSlackUser {
  return [[__postToSlackUser retain_stub] autorelease_stub];
}

- (void) setPostToSlackUser: (AromaReactions_ActionPostToSlackUser *) postToSlackUser {
  [postToSlackUser retain_stub];
  [__postToSlackUser release_stub];
  __postToSlackUser = postToSlackUser;
  __postToSlackUser_isset = YES;
}

- (BOOL) postToSlackUserIsSet {
  return __postToSlackUser_isset;
}

- (void) unsetPostToSlackUser {
  [__postToSlackUser release_stub];
  __postToSlackUser = nil;
  __postToSlackUser_isset = NO;
}

- (AromaReactions_ActionSendEmail *) sendEmail {
  return [[__sendEmail retain_stub] autorelease_stub];
}

- (void) setSendEmail: (AromaReactions_ActionSendEmail *) sendEmail {
  [sendEmail retain_stub];
  [__sendEmail release_stub];
  __sendEmail = sendEmail;
  __sendEmail_isset = YES;
}

- (BOOL) sendEmailIsSet {
  return __sendEmail_isset;
}

- (void) unsetSendEmail {
  [__sendEmail release_stub];
  __sendEmail = nil;
  __sendEmail_isset = NO;
}

- (AromaReactions_ActionIgnore *) ignore {
  return [[__ignore retain_stub] autorelease_stub];
}

- (void) setIgnore: (AromaReactions_ActionIgnore *) ignore {
  [ignore retain_stub];
  [__ignore release_stub];
  __ignore = ignore;
  __ignore_isset = YES;
}

- (BOOL) ignoreIsSet {
  return __ignore_isset;
}

- (void) unsetIgnore {
  [__ignore release_stub];
  __ignore = nil;
  __ignore_isset = NO;
}

- (AromaReactions_ActionDeleteMessage *) deleteMessage {
  return [[__deleteMessage retain_stub] autorelease_stub];
}

- (void) setDeleteMessage: (AromaReactions_ActionDeleteMessage *) deleteMessage {
  [deleteMessage retain_stub];
  [__deleteMessage release_stub];
  __deleteMessage = deleteMessage;
  __deleteMessage_isset = YES;
}

- (BOOL) deleteMessageIsSet {
  return __deleteMessage_isset;
}

- (void) unsetDeleteMessage {
  [__deleteMessage release_stub];
  __deleteMessage = nil;
  __deleteMessage_isset = NO;
}

- (AromaReactions_ActionRespondToCode *) respondToCode {
  return [[__respondToCode retain_stub] autorelease_stub];
}

- (void) setRespondToCode: (AromaReactions_ActionRespondToCode *) respondToCode {
  [respondToCode retain_stub];
  [__respondToCode release_stub];
  __respondToCode = respondToCode;
  __respondToCode_isset = YES;
}

- (BOOL) respondToCodeIsSet {
  return __respondToCode_isset;
}

- (void) unsetRespondToCode {
  [__respondToCode release_stub];
  __respondToCode = nil;
  __respondToCode_isset = NO;
}

- (AromaReactions_ActionForwardToUsers *) forwardToUsers {
  return [[__forwardToUsers retain_stub] autorelease_stub];
}

- (void) setForwardToUsers: (AromaReactions_ActionForwardToUsers *) forwardToUsers {
  [forwardToUsers retain_stub];
  [__forwardToUsers release_stub];
  __forwardToUsers = forwardToUsers;
  __forwardToUsers_isset = YES;
}

- (BOOL) forwardToUsersIsSet {
  return __forwardToUsers_isset;
}

- (void) unsetForwardToUsers {
  [__forwardToUsers release_stub];
  __forwardToUsers = nil;
  __forwardToUsers_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaReactions_ActionPostToSlackChannel *fieldValue = [[AromaReactions_ActionPostToSlackChannel alloc] init];
          [fieldValue read: inProtocol];
          [self setPostToSlackChannel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaReactions_ActionPostToSlackUser *fieldValue = [[AromaReactions_ActionPostToSlackUser alloc] init];
          [fieldValue read: inProtocol];
          [self setPostToSlackUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AromaReactions_ActionSendEmail *fieldValue = [[AromaReactions_ActionSendEmail alloc] init];
          [fieldValue read: inProtocol];
          [self setSendEmail: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          AromaReactions_ActionIgnore *fieldValue = [[AromaReactions_ActionIgnore alloc] init];
          [fieldValue read: inProtocol];
          [self setIgnore: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          AromaReactions_ActionDeleteMessage *fieldValue = [[AromaReactions_ActionDeleteMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setDeleteMessage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          AromaReactions_ActionRespondToCode *fieldValue = [[AromaReactions_ActionRespondToCode alloc] init];
          [fieldValue read: inProtocol];
          [self setRespondToCode: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          AromaReactions_ActionForwardToUsers *fieldValue = [[AromaReactions_ActionForwardToUsers alloc] init];
          [fieldValue read: inProtocol];
          [self setForwardToUsers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AromaAction"];
  if (__postToSlackChannel_isset) {
    if (__postToSlackChannel != nil) {
      [outProtocol writeFieldBeginWithName: @"postToSlackChannel" type: TType_STRUCT fieldID: 1];
      [__postToSlackChannel write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__postToSlackUser_isset) {
    if (__postToSlackUser != nil) {
      [outProtocol writeFieldBeginWithName: @"postToSlackUser" type: TType_STRUCT fieldID: 2];
      [__postToSlackUser write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sendEmail_isset) {
    if (__sendEmail != nil) {
      [outProtocol writeFieldBeginWithName: @"sendEmail" type: TType_STRUCT fieldID: 3];
      [__sendEmail write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ignore_isset) {
    if (__ignore != nil) {
      [outProtocol writeFieldBeginWithName: @"ignore" type: TType_STRUCT fieldID: 4];
      [__ignore write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deleteMessage_isset) {
    if (__deleteMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"deleteMessage" type: TType_STRUCT fieldID: 5];
      [__deleteMessage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__respondToCode_isset) {
    if (__respondToCode != nil) {
      [outProtocol writeFieldBeginWithName: @"respondToCode" type: TType_STRUCT fieldID: 6];
      [__respondToCode write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__forwardToUsers_isset) {
    if (__forwardToUsers != nil) {
      [outProtocol writeFieldBeginWithName: @"forwardToUsers" type: TType_STRUCT fieldID: 7];
      [__forwardToUsers write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_AromaAction("];
  [ms appendString: @"postToSlackChannel:"];
  [ms appendFormat: @"%@", __postToSlackChannel];
  [ms appendString: @",postToSlackUser:"];
  [ms appendFormat: @"%@", __postToSlackUser];
  [ms appendString: @",sendEmail:"];
  [ms appendFormat: @"%@", __sendEmail];
  [ms appendString: @",ignore:"];
  [ms appendFormat: @"%@", __ignore];
  [ms appendString: @",deleteMessage:"];
  [ms appendFormat: @"%@", __deleteMessage];
  [ms appendString: @",respondToCode:"];
  [ms appendFormat: @"%@", __respondToCode];
  [ms appendString: @",forwardToUsers:"];
  [ms appendFormat: @"%@", __forwardToUsers];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AromaReactions_Reaction

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMatcher: (AromaReactions_AromaMatcher *) matcher action: (AromaReactions_AromaAction *) action
{
  self = [super init];
  __matcher = [matcher retain_stub];
  __matcher_isset = YES;
  __action = [action retain_stub];
  __action_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"matcher"])
  {
    __matcher = [[decoder decodeObjectForKey: @"matcher"] retain_stub];
    __matcher_isset = YES;
  }
  if ([decoder containsValueForKey: @"action"])
  {
    __action = [[decoder decodeObjectForKey: @"action"] retain_stub];
    __action_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__matcher_isset)
  {
    [encoder encodeObject: __matcher forKey: @"matcher"];
  }
  if (__action_isset)
  {
    [encoder encodeObject: __action forKey: @"action"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __matcher_isset ? 2654435761 : 0;
  if (__matcher_isset)
  {
    hash = (hash * 31) ^ [__matcher hash];
  }
  hash = (hash * 31) ^ __action_isset ? 2654435761 : 0;
  if (__action_isset)
  {
    hash = (hash * 31) ^ [__action hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AromaReactions_Reaction class]]) {
    return NO;
  }
  AromaReactions_Reaction *other = (AromaReactions_Reaction *)anObject;
  if ((__matcher_isset != other->__matcher_isset) ||
      (__matcher_isset && ((__matcher || other->__matcher) && ![__matcher isEqual:other->__matcher]))) {
    return NO;
  }
  if ((__action_isset != other->__action_isset) ||
      (__action_isset && ((__action || other->__action) && ![__action isEqual:other->__action]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__matcher release_stub];
  [__action release_stub];
  [super dealloc_stub];
}

- (AromaReactions_AromaMatcher *) matcher {
  return [[__matcher retain_stub] autorelease_stub];
}

- (void) setMatcher: (AromaReactions_AromaMatcher *) matcher {
  [matcher retain_stub];
  [__matcher release_stub];
  __matcher = matcher;
  __matcher_isset = YES;
}

- (BOOL) matcherIsSet {
  return __matcher_isset;
}

- (void) unsetMatcher {
  [__matcher release_stub];
  __matcher = nil;
  __matcher_isset = NO;
}

- (AromaReactions_AromaAction *) action {
  return [[__action retain_stub] autorelease_stub];
}

- (void) setAction: (AromaReactions_AromaAction *) action {
  [action retain_stub];
  [__action release_stub];
  __action = action;
  __action_isset = YES;
}

- (BOOL) actionIsSet {
  return __action_isset;
}

- (void) unsetAction {
  [__action release_stub];
  __action = nil;
  __action_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AromaReactions_AromaMatcher *fieldValue = [[AromaReactions_AromaMatcher alloc] init];
          [fieldValue read: inProtocol];
          [self setMatcher: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AromaReactions_AromaAction *fieldValue = [[AromaReactions_AromaAction alloc] init];
          [fieldValue read: inProtocol];
          [self setAction: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Reaction"];
  if (__matcher_isset) {
    if (__matcher != nil) {
      [outProtocol writeFieldBeginWithName: @"matcher" type: TType_STRUCT fieldID: 1];
      [__matcher write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__action_isset) {
    if (__action != nil) {
      [outProtocol writeFieldBeginWithName: @"action" type: TType_STRUCT fieldID: 2];
      [__action write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AromaReactions_Reaction("];
  [ms appendString: @"matcher:"];
  [ms appendFormat: @"%@", __matcher];
  [ms appendString: @",action:"];
  [ms appendFormat: @"%@", __action];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation AromaReactions_ReactionsConstants
+ (void) initialize {
}
@end

